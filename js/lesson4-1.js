// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫.
// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id
// —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.

// logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å

// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å



// your code here
// const product = {
//   name: "chocolate",
//   price: 34,
//   quantity: 5
// }

// const createProduct = (obj, callback) => {
//   // —Å—Ç–≤–æ—Ä–∏–ª–∏ –Ω–æ–≤–∏–π –æ–± º—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–ø—Ä–µ–¥ –∑–∞–±—Ä–∞–ª–º –≤—Å—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–∏ —ñ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ obj
//   const product = {
//     ...obj,
//     id: 1
//   };

//   // –≤–∏–∫–ª–∏–∫–∞–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—é callback —è–∫—É –ø–µ—Ä–µ–¥–∞—é—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö. –ü–µ—Ä–µ–¥–∞–ª–∏ —ó–π –Ω–æ–≤–∏–π –æ–± º—î–∫—Ç —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
//   // –ü–æ–≤–µ—Ä–Ω—É–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫–∞
//   return callback(product)
// };

// // –°—Ç–≤–æ—Ä–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä(–±—É–¥—å-—â–æ) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// const logger = (val) => {
//   console.log(val)
// }

// // –°—Ç–≤–æ—Ä–∏–ª–∏ —â–µ –æ–¥–Ω—É –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞–∫ –ø—Ä–∏–π–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–± º—î–∫—Ç(—Ç–æ–≤–∞—Ä) —ñ —Ä–∞—Ö—É—î –≤–∞—Ä—Ç—ñ—Å—Ç—å.
// const calculateTotalPrice = ({price, quantity}) => {
//   const total = price * quantity;
//   return total
// }

// /**
//  * –∫–æ—Ä–æ—Ç—à–∞ —Ñ–æ—Ä–º–∞ –∑–∞–ø–∏—Å—É:
//  * const logger = val => console.log(val)
//  * const calculateTotalPrice = ({price, quantity}) => price * quantity
//  */

// //–≤–∏–∫–ª–∏–∫–∞–ª–∏ createProduct. –ü–µ—Ä–µ–¥–∞–ª–∏ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏: –æ–± º—î–∫—Ç —Ç–æ–≤–∞—Ä–∞ —ñ –±—É–¥—å-—è–∫—É —Ñ—É–Ω–∫—Ü—ñ—é –∫–æ–ª–±–µ–∫
// createProduct(product, logger); // –∫–æ–ª–±–µ–∫–æ–º –±—É–¥–µ —Ñ—É–Ω–∫—Ü—ñ—è looger
// const totalPrice = createProduct(product, calculateTotalPrice); // –∫–æ–ª–±–µ–∫–æ–º –±—É–¥–µ —Ñ—É–Ω–∫—Ü—ñ—è calculateTotalPrice
// console.log(totalPrice)







// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError),
// –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é,
// —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.


// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 40000,
  
//   withdraw (amount, onSuccess, onError) {
//     if(amount > this.balance) {
//       return onError(amount, '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É')
//     }
    
//     if(amount > TRANSACTION_LIMIT) {
//       return onError(amount, '–ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω–æ –ª—ñ–º—ñ—Ç –æ–ø–µ—Ä–∞—Ü—ñ–π')
//     }

//     onSuccess(amount);
//   },

//   deposit (amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT || amount <= 0) {
//       return onError(amount)
//     }

//     onSuccess(amount);
//   },
// };

// const handleSuccess = (amount) => console.log(`${amount} —É—Å–ø—ñ—à–Ω–æ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ!`)


// const handleError = (amount, message = '–ù–µ–≤—ñ–¥–æ–º–æ') => console.log(`${amount} –ù–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ! –ü–æ –ø—Ä–∏—á–∏–Ω—ñ: ${message}`)

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);






// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤,

// –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

// const employees = [
//   { name: 'Artur', bonus: 64.5 },
//   { name: 'Ivan', bonus: 49.2 },
//   { name: 'Makar', bonus: 36 },
//   { name: 'Anastasiya', bonus: 25 },
//   { name: 'Olha', bonus: 165.13 },
// ]

// // —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—é each, —è–∫–∞ —á–µ–∫–∞—î –º–∞—Å–∏–≤ —ñ —Ñ—É–Ω–∫—Ü—ñ—é –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
// const each = (arr, callback) => {
//   const resultArr = []; // –Ω–æ–≤–∏–π –º–∞—Å–∞–≤ —è–∫–∏–π –±—É–¥–µ–º–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏

//   /**
//    * –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ —Ü–∏–∫–ª–æ–º –º–∞—Å–∏–≤, –¥–∏—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–≤—à–∏ –µ–ª–µ–º–µ–Ω—Ç –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
//    * –∑–∞–ø–∏—Å –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–∏–π —Ü—å–æ–º—É:
//       for (const item of arr) {
//         resultArr.push({
//           name: item.name,
//           bonus: callback(item.bonus)
//         })
//       }
//   */
//     for (const { name, bonus } of arr) {
//     // –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–ª–±–µ–∫ –¥–ª—è –±–æ–Ω—É—Å—É —ñ –∫–ª–∞–¥–µ–º–æ –Ω–æ–≤–∏–π –æ–± º—î–∫—Ç –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
//     resultArr.push({
//       name,
//       bonus: callback(bonus)
//     })
//   }

//   return resultArr; // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
// }

// const roundBonus = value => Math.floor(value) // —Ç–µ —Å–∞–º–µ, —â–æ

// // 1. const roundBonus = (value) => {
// //   return Math.floor(value)
// // }

// // 2. function roundBonus (value) {
// //   return Math.floor(value)
// // }

// // 3. const roundBonus = function (value) {
// //   return Math.floor(value)
// // }

// // –≤–∏–∫–ª–∏–∫–∞–ª–∏ each, –ø–µ—Ä–µ–¥–∞–ª–∏ —ó–π –º–∞—Å–∏–≤ –∑ –¥–∞–Ω–∏–º–∏ —ñ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –∫–æ–ª–±–µ–∫. –û—á—ñ–∫—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// const roundedBonuses = each(employees, roundBonus);
// console.log(roundedBonuses);









// Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const createProduct = (partialProduct, callback) => {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// }

// const logProduct = product => console.log(product);


// const logTotalPrice = product => console.log(product.price * product.quantity);


// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);







// Example 7 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// const logItems = (items) => {
//     console.log(items);
//     // –ö–ª–∞—Å–∏—á–Ω–∏–π for
// //   for (let i = 0; i < items.length; i += 1) {
// //     console.log(`${i + 1} - ${items[i]}`);
// //     }
    
//     items.forEach ((item, index) => console.log(`${index + 1} - ${item}`));
    
// }

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);






// Example 8 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// function printContactsInfo({ names, phones }) {
//     const nameList = names.split(',');
 
//     const phoneList = phones.split(',');
//     //  –∫–ª–∞—Å–Ω–∏—á–Ω–∏–π for
// //   for (let i = 0; i < nameList.length; i += 1) {
// //     console.log(`${nameList[i]}: ${phoneList[i]}`);
// //   }
//      nameList.forEach((name, index) => {
//     console.log(`${name}: ${phoneList[index]}`);
//   });
// }

// printContactsInfo({
//   names: 'Jacob,William,Solomon,Artemis',
//   phones: '89001234567,89001112233,890055566377,890055566300',
// });





// Example 9 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// function cal—ÅulateAverage(...args) {
//   let total = 0;
// //   for (let i = 0; i < args.length; i++) {
// //     total += args[i];
// //   }
//     args.forEach(arg => total += arg);

//   return total / args.length;
// }

// console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2