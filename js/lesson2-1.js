// Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ "Jazz" —Ç–∞ "Blues".
// –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –í–∏–≤–µ–¥—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –≤ –∫–æ–Ω—Å–æ–ª—å. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.

//   /** C—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ */
//   let genres = ['Jazz', 'Blues'];

//   /** –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É */
//   genres.push('–†–æ–∫-–Ω-—Ä–æ–ª');

//   /** –≤–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç */
//   console.log("–ø–µ—Ä—à–∏–π",genres[0])

//   /**
//    * 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤–∞
//    * 2. –í–∏–≤–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –ø–æ —ñ–Ω–¥–µ–∫—Å—É
//   */
//   const lastIndex = genres.length - 1;
//   console.log("last", genres[lastIndex]);

//   /** –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞ */
//   const firstElement = genres.shift();

//   /** –í–∏–≤–æ–¥–∏–º–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç */
//   console.log(firstElement);

//   /** –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É –¥–≤–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ */
//   genres.unshift('Country','Reggae');
//   console.log(genres);

// Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
// –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.
// –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// const values = '8 11';

// /** —Ä–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –ø–æ –ø—Ä–æ–±—ñ–ª—É. –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –º–∞—Å—Å–∏–≤ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ['8','11']  */
//  const sides = values.split(' ');

//  console.log(sides);

// /** –ü–µ—Ä–µ–º–Ω–æ–∂–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å–∏–≤–∞ –ø–æ —ñ–Ω–¥–µ–∫—Å—É */
//  const square = sides[0] * sides[1];
//  console.log(square)

//  * Task 3
//   * –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ
//   * –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
//   * 1: —è–±–ª—É–∫–æ
//   * 2: –≤–∏–Ω–æ–≥—Ä–∞–¥
//   *
//   * –î–ª—è —Ü—å–æ–≥–æ –≤ —Ç—ñ–ª—ñ —Ü–∏–∫–ª—É –ø—Ä–∏ –≤–∏–≤–æ–¥—ñ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–æ —ñ–Ω–¥–µ–∫—Å–∞ 'i' –¥–æ–¥–∞—î–º–æ 1
//   */

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i += 1) {
//     console.log(`${i + 1}: ${fruits[i]}`)
// }

// Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
// –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
// —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.–ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å.
// –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// const names = 'Jacob,William,Solomon,Artemis';
// const phones = '89001234567,89001112233,890055566377,890055566300';

// // –ó—Ä–æ–±–∏—Ç–∏ –º–∞—Å–∏–≤
// const newNames = names.split(',');
// console.log(newNames);

// const newPhones = phones.split(',');
// console.log(newPhones);

// //
// for (let i = 0; i < newNames.length; i += 1) {
//     console.log(`${newNames[i]} - ${newPhones[i]}`);

// }

// Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –æ–∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ.
// –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É.
// –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å - —è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// const string = 'Welcome to the future';

// // –†–æ–±–∏–º–æ –º–∞—Å–∏–≤
// const newString = string.split(' ');
// console.log(newString);

// // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É

// const deletedFirstElement = newString.shift();
// console.log(deletedFirstElement);

// console.log(newString);

// // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
// const deletedLastElement = newString.pop();
// console.log(deletedLastElement);
// console.log(newString);

// –í–∞—Ä—ñ–∞–Ω—Ç –ª–µ–∫—Ç–æ—Ä–∞
//  * Task 5.
//  * –í–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ.
//  * –ú–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å —è–∫–æ–≥–æ —Ä—è–¥–∫–∞.
//  * 1. –†–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤ –ø–æ –ø—Ä–æ–±—ñ–ª—É(–∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ - –æ–∫—Ä–µ–º–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞)
//  * 2. –ú–µ—Ç–æ–¥–æ–º splice - –∑–º—ñ–Ω—é—î–º–æ –º–∞—Å–∏–≤ –≤–∏–¥–∞–ª—è—é—á–∏ –∑ –Ω—å–æ–≥–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ —Å–æ—Ç–∞–Ω–Ω—å–æ–≥–æ
//  *    splice(—ñ–Ω–¥–µ–∫—Å –∑ —è–∫–æ–≥–æ –ø–æ—á–∏–Ω–∞—Ç–∏, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
//  * 3. slice –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∑ –≤–∏–¥–∞–ª–µ–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
//  * 4. –ó–±–∏—Ä–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–∏–π –º–∞—Å–∏–≤ –≤ —Ä—è–¥–æ–∫
//  *
//  * Note: –î–ª—è –º–µ—Ç–æ–¥–∞ slice –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º(–ø–æ—á–∞—Ç–∫–æ–º) –±—É–¥–µ –µ–ª–µ–º–µ–Ω—Ç –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 1(–¥—Ä—É–≥–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞).
//  * –ê–ª–µ —è–∫ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:
//  *  –í—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –º–∞—Å–∏–≤—ñ "words.length". –Ø–∫—â–æ –± —Ç—Ä–µ–±–∞ –±—É–ª–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å–µ, —Ç–æ –ø—ñ–¥—ñ–π—à–ª–æ –±.
//  *  –ê–ª–µ –ø–µ—Ä—à–∏–π –º–∏ –≤–∂–µ –≤—ñ–¥–∫–∏–¥—É—î–º–æ, —Ç–æ–º—É –±–µ—Ä–µ–º "words.length - 1".
//  *  –¢–µ–ø–µ—Ä, –∑ —É–º–æ–≤–æ—é –∑–∞–¥–∞—á—ñ, —Ç—Ä–µ–±–∞ –≤—ñ–¥–∫–∏–Ω—É—Ç–∏ —ñ –æ—Å—Ç–∞–Ω–Ω—ñ–π. –¢–æ–±—Ç–æ –≤—ñ–¥–Ω—è—Ç–∏ —â–µ –æ–¥–∏–Ω–∏—Ü—é.
//  *  –¢–æ–º—É –≤–∏–π–¥–µ "words.length - 2"
//  */

//  const string = 'Welcome to the future. Hello my name is Stepan';
//  const words = string.split(' ');
//  console.log(words)

//  const amountToDelete = words.length - 2;
//  const deletedWords = words.splice(1, amountToDelete );
//  console.log(deletedWords)

//  let newString = deletedWords.join(' ');
//  console.log(newString)

// Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å —ó—ó –≤ –∫–æ–Ω—Å–æ–ª—å.

// * 1. –†–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ(–∫–æ–∂–µ–Ω —Å–∏–º–≤–æ–ª —Ä—è–¥–∫–∞ - –æ–∫—Ä–µ–º–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞)
//  * 2. –ú–µ—Ç–æ–¥–æ–º reverse, —Ä–æ–∑–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ —Å–∑–∞–¥—É –Ω–∞–ø–µ—Ä–µ–¥([a,b,c] -> [c,b,a])
//  * 3. –ó–±–∏—Ä–∞—î–º–æ –≤–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏–π –º–∞—Å–∏–≤ –≤ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
//  */

//  const string = 'Welcome to the future';

//  const array = string.split('');
//  console.log(array);

//  array.reverse();
//  console.log(array);

//  const newString = array.join('');
//  console.log(string, '|',newString)
// /** –í–∞—Ä—ñ–∞–Ω—Ç 2
//  * –ø—Ä–æ—Ö–æ–¥–∏–º–æ —Ü–∏–∫–ª–æ–º –∑ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤–æ –¥–æ –ø–æ—á–∞—Ç–∫—É.
//  * –ü–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –∑–∞–ø–∏—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ä—è–¥–æ–∫
//  */
// let newStr = '';
//  for (let i = string.length - 1; i >= 0; i -= 1) {
//   console.log(i, string[i], newStr)
//   newStr += string[i];
//  }

//  console.log(newStr)

// Example 7 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// console.log(langs);

// langs.sort()
//   console.log(langs)

// Example 8 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ.
// –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å - —è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª.–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

// const numbers = [2, 17, 94, 1, 23, 37];
// let min = numbers[0];

// for (const number of numbers) {
//     console.log(number);
//     if (number < min) {
//         min = number;
//     }
// }
//     console.log(min);

// –§—É–Ω–∫—Ü–∏–∏

// Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞.
// –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.

// –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;

// 1) –ó–∞–ø–∏—Ç–∞—Ç–∏ –≤–≤–µ—Å—Ç–∏ –≤–∞–≥—É —ñ –∑—Ä—ñ—Å - prompt
// 2) —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É—Å—Ç—É —Ñ—É–Ω–∫—Ü—ñ—é —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–µ–∫—Å—É –º–∞—Å–∏ - function
// 3) –∑–∞–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∞–≥–∏ —ñ –∑—Ä–æ—Å—Ç—É - (weight, height)
// 4) —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏. - Math.pow()
// 5) –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - return
// 6) –æ–∫—Ä—É–≥–ª–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –æ–¥–Ω—ñ—î —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏ toFixed(1)

// const weight = prompt('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É –≤ –∫–≥');
// const height = prompt('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç –≤ –º–µ—Ç—Ä–∞—Ö');

// const calcBMI = function(weightU, heightU) {
//   const heightPow = Math.pow(heightU, 2);
//   const result = weightU / heightPow;

//   return result.toFixed(1)
// }

// Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.

// const min = function (a, b) {
//   let result = 0;

//   return a < b ? (result = a) : (result = b);
// };

// console.log(min(2, 5));
// console.log(min(3, -1));
// console.log(min(1, 1));

// Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
// –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∏.
// –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// const getRectArea = function (dimensions) {
//     const result = dimensions.split(' ');
//     const square = result[0] * result[1];

//     return square;
// }

// console.log(getRectArea('8 11'));

// Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for,
// —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—ñ
// < –Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞ > - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ >.–ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0
//  –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 ‚Äì Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 ‚Äì Ajax.

// const logItems = function (items) {
//     for (let i = 0; i < items.length; i += 1) {
//         console.log(`${i + 1}: ${items[i]}`);
//     }
// }

// console.log(logItems(['Mango', 'Poly', 'Ajax']));
// console.log(logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']));

// Example 5 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printContactsInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
// –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
// –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å.
// –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–µ.

// const printContactsInfo = function (names, phones) {
//   const newNames = names.split(' ');
//   const newPhones = phones.split(' ');
//   console.log(newNames);
//   console.log(newPhones);

//   for (let i = 0; i < newNames.length; i += 1) {
//     console.log(`${newNames[i]} - ${newPhones[i]}`);
//   }
// };

// console.log(
//   printContactsInfo(
//     'Jacob, William, Solomon, Artemis',
//     '89001234567, 89001112233, 890055566377, 890055566300'
//   )
// );

// Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers) —è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.

// const findLargestNumber = function (numbers) {
//   let findLargestNumber = numbers[0];
//   for (const number of numbers) {
//     // console.log(number);
//     if (number > findLargestNumber) {
//       findLargestNumber = number;
//     }
//   }
//   return findLargestNumber;
// };

// console.log(findLargestNumber([2, 17, 94, 1, 23, 37]));
// console.log(findLargestNumber([49, 4, 7, 83, 12]));

// Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è.
// –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.

// const calAverage = function (numbers) {
//   let total = 1;
//   let value = [];
//   for (const argument of arguments) {
//     console.log(argument);

//     total *= argument;
//   }
//   return total;
// };

// console.log(calAverage(1, 2, 3, 4));
// console.log(calAverage(14, 8, 2));
// console.log(calAverage(27, 43, 2, 8, 36));

// Example 8 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes)
// —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è minutes(–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH: MM.


// const formatTime = function (minutes) {
//   const hours = Math.floor(minutes / 60);
//   const minute = minutes % 60;
//   console.log(hours);
//   console.log(minute);
//   const doubleDigitHours = String(hours).padStart(2, 0);
//   const doubleDigitMinutes = String(minute).padStart(2, 0);
//   return `${doubleDigitHours}:${doubleDigitMinutes}`;
// };

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01" ``






// Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push —ñ —Ç.–¥.)
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:

// addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
// removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// updateCourse(oldName, newName) - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ

// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

// const addCourse = function (name) {
//     // let message = '';
//     courses.push(name);
    // if (name !== courses) {
    //     message = '–£ –≤–∞—Å –≤–∂–µ —î —Ç–∞–∫–∏–π –∫—É—Ä—Å';

    // }
    // return message;

// }

// const removeCourse = function (name) {
//     const deletedLastElement = courses.splice()
// }

// addCourse('Express');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// addCourse('CSS'); // '–£ –≤–∞—Å –≤–∂–µ —î —Ç–∞–∫–∏–π –∫—É—Ä—Å'

// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// // removeCourse('Vue'); // '–ö—É—Ä—Å –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

// // updateCourse('Express', 'NestJS');
// // console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS'] ``


// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

// /** –©–æ–± –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∑–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ - prompt */
// const courseName = prompt('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—É—Ä—Å—É');
// const newName = prompt('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º º—è');

// const addCourse = function(newCourse) {

//   if (courses.includes(newCourse)) {
//     console.log('–¢–∞–∫–∏–π –∫—É—Ä—Å –≤–∂–µ —î');
//     return // —Ä–∞–Ω–Ω—ñ–π –≤–∏—Ö—ñ–¥ —ñ–∑ —Ñ—É–Ω–∫—Ü—ñ—ó
//   }

//   courses.push(newCourse);
//   return courses; // –ü–∞–º º—è—Ç–∞–π—Ç–µ, —â–æ –∑–º—ñ–Ω–Ω–∞ courses —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Å–∏–≤!
// }

// const removeCourse = function (courseName) {
  
//   const index = courses.indexOf(courseName);
  
//   if (index === -1) {
//     console.log('—Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å—É –Ω–µ–º–∞')
//     return
//   }
  
//   const deletedCourses = courses.splice(index, 1);
//   return deletedCourses
// }

// const updateCourse = function (oldName, newName) {
//   const index = courses.indexOf(oldName);
  
//   if (index === -1) {
//     console.log('—Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å—É –Ω–µ–º–∞')
//     return
//   }

//   courses[index] = newName
// }


// /** checkCourseName - —Ñ—É–Ω–∫—Ü—ñ—è –≤ —è–∫—É –º–∏ –≤–∏–Ω–µ—Å–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –µ–ª–µ–º–Ω—Ç—É –≤ –º–∞—Å–∏–≤—ñ. */
// const checkCourseName = function (value) {
//   const index = courses.indexOf(value);

//   if (index === -1) {
//     console.log('—Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å—É –Ω–µ–º–∞')
//     return false
//   } else {
//     console.log('–¢–∞–∫–∏–π –∫—É—Ä—Å –≤–∂–µ —î');
//     return true
//   }
// const calculateEngravingPrice = function (message, pricePerWord) {
//    // Change code below this line
//     // let newName = typeof Number(message);
//     // let newMessage = newName.length;
//     // console.log(newName);
//     // console.log(newMessage);
//     // console.log(newMessage * pricePerWord);
//     let newMessage = message.split(' ');
//     console.log(newMessage);
//     console.log(newMessage.length * pricePerWord);

//    // Change code above this line
// }
// calculateEngravingPrice("Web-development is creative work", 40);





// const makeArray = function (firstArray, secondArray, maxLength) {
//     // Change code below this line
//     const newArray = firstArray.concat(secondArray);
//     // console.log(newArray);
//     if (newArray.length > maxLength) {
//         const newElement = newArray.slice(0, maxLength);
//     console.log(newElement);
//   }


//     // Change code above this line
// }
// makeArray(["Mango", "Poly"], ["Ajax", "Chelsea"], 3);
// makeArray(["Mango", "Poly", "Houston"], ["Ajax", "Chelsea"], 4);
// makeArray(['Earth', 'Jupiter'], ['Neptune', 'Uranus'], 4);


// function filterArray(numbers, value) {
//    // Change code below this line
//     const newNumbers = [];
//     for (const number of numbers) {
//         if (number > value) {
//             newNumbers.push(number);

//         }
    
//    }
//     return newNumbers;

//   // Change code above this line
// }
// console.log(filterArray([1, 2, 3, 4, 5], 3));

// function getCommonElements(array1, array2) {
//   // Change code below this line
//     const newElements = [];
//     for (let number of array1) {
//         if (array2.includes(number) && array1.includes(number)) {
//             newElements.push(number);
        
//        }
//     }
//         return newElements;


//  // Change code above this line
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));





// function getEvenNumbers(start, end) {
//    // Change code below this line
//     const numbers = [];
//     for (let i = start; i < end; i += 1) {
        
//         if (i % 2 === 0) {
//             numbers.push(i);
//         }
        
//     }
//         return numbers;


//     // Change code above this line
// }
// console.log(getEvenNumbers(2, 5));



// function includes(array, value) {
//   // Change code below this line
//     for (const number of array) {
//         if (number === value) {
//             return true;
            
//         }
        
//     }
//     return false;
//   // Change code above this line
// }
// console.log(includes([1, 2, 3, 4, 5], 3));